\section{پایگاه‌داده}
با رشد کاربران، یک سرور کافی نیست و به چندین سرور نیاز داریم: یکی برای ترافیک وب/موبایل و دیگری برای پایگاه‌داده (شکل ۱-۳). جداسازی ترافیک وب/موبایل\footnote{\lr{Web Tier}} و سرورهای پایگاه‌داده\footnote{\lr{Data Tier}} امکان مقیاس‌پذیری مستقل آن‌ها را فراهم می‌کند.

\subsection{انتخاب نوع پایگاه‌داده}
می‌توان بین پایگاه‌داده‌های رابطه‌ای سنتی و غیررابطه‌ای انتخاب کرد. بیایید تفاوت‌های آن‌ها را بررسی کنیم.

\subsubsection{پایگاه‌داده‌های رابطه‌ای}
این پایگاه‌داده‌ها که با نام \lr{RDBMS}\footnote{سیستم مدیریت پایگاه‌داده رابطه‌ای} یا \lr{SQL}\footnote{زبان پرس‌وجوی ساختاریافته} شناخته می‌شوند، داده‌ها را در قالب جداول و سطرها ذخیره می‌کنند. از معروف‌ترین آن‌ها می‌توان به \lr{MySQL}، \lr{Oracle} و \lr{PostgreSQL} اشاره کرد. در این سیستم‌ها می‌توان از عملیات \lr{join}\footnote{اتصال جدول‌ها} بین جداول مختلف استفاده کرد.

\subsubsection{پایگاه‌داده‌های غیررابطه‌ای}
این پایگاه‌داده‌ها که با نام \lr{NoSQL}\footnote{پایگاه‌داده‌های غیررابطه‌ای} شناخته می‌شوند، به چهار گروه اصلی تقسیم می‌شوند:
\begin{itemize}
    \item ذخیره‌سازی کلید-مقدار
    \item ذخیره‌سازی گرافی
    \item ذخیره‌سازی ستونی
    \item ذخیره‌سازی اسناد
\end{itemize}
از نمونه‌های معروف می‌توان به \lr{Cassandra}، \lr{MongoDB} و \lr{Redis} اشاره کرد. معمولاً امکان \lr{join} در این سیستم‌ها وجود ندارد.

\subsection{معیارهای انتخاب}
برای اغلب توسعه‌دهندگان، پایگاه‌داده‌های رابطه‌ای گزینه بهتری هستند چرا که بیش از چهار دهه سابقه کار دارند. اما در موارد خاص ممکن است نیاز به استفاده از نوع غیررابطه‌ای باشد:

\begin{itemize}
    \item نیاز به تاخیر بسیار کم
    \item داده‌های بدون ساختار
    \item نیاز به ذخیره‌سازی حجم عظیم داده
    \item کاربردهای خاص مانند پردازش جریان‌های داده
\end{itemize}