\section{عملکرد حتی در صورت آفلاین بودن پایگاه‌داده}
در این معماری، حتی با آفلاین بودن یک پایگاه‌داده، امکان دسترسی به داده‌های ذخیره‌شده در سرور دیگر وجود دارد. در بخش قبل، نقش \lr{load balancer} در بهبود دسترس‌پذیری سیستم را بررسی کردیم. حال این پرسش مطرح می‌شود: اگر یکی از پایگاه‌های‌داده آفلاین شود چه می‌شود؟ معماری نشان‌داده‌شده در شکل ۱-۵ این سناریو را پوشش می‌دهد:

\begin{itemize}
\item در صورت آفلاین شدن تنها پایگاه‌داده \lr{slave}\footnote{پایگاه‌داده پیرو} موجود، عملیات خواندن موقتاً به پایگاه‌داده \lr{master}\footnote{پایگاه‌داده اصلی} منتقل می‌شود. پس از تشخیص مشکل، یک پایگاه‌داده \lr{slave} جدید جایگزین می‌شود. اگر چندین \lr{slave} وجود داشته باشد، ترافیک خواندن به سایر گره‌های سالم هدایت شده و \lr{slave} جدید جایگزین می‌گردد.

\item اگر \lr{master} آفلاین شود، یکی از \lr{slave}ها به عنوان \lr{master} جدید انتخاب می‌شود. کلیه عملیات موقتاً روی این گره جدید انجام می‌شوند و همزمان یک \lr{slave} جدید برای تکثیر داده‌ها مستقر می‌گردد.
\end{itemize}

در محیط‌های عملیاتی، ارتقای \lr{master} جدید چالش‌برانگیزتر است، زیرا داده‌های \lr{slave} ممکن است قدیمی باشند. در این حالت باید اسکریپت‌های بازیابی\footnote{\lr{recovery scripts}} برای همگام‌سازی داده‌ها اجرا شوند. روش‌های پیشرفته‌تری مانند \lr{multi-master}\footnote{چندپایگاه‌داده اصلی} یا تکثیر حلقوی\footnote{\lr{circular replication}} وجود دارند، اما پیاده‌سازی آن‌ها پیچیده‌تر بوده و از حوصله این بحث خارج است. برای مطالعه بیشتر به منابع [۴] و [۵] مراجعه فرمایید.

شکل ۱-۶ نمای سیستم پس از پیاده‌سازی \lr{load balancer} و مکانیزم تکثیر پایگاه‌داده را نمایش می‌دهد.