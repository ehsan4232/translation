\section{پایگاه داده}  
با رشد پایگاه کاربری، یک سرور کافی نیست و به چندین سرور نیاز داریم: یکی برای ترافیک وب/موبایل و دیگری برای پایگاه داده (شکل ۱-۳). جداسازی ترافیک وب/موبایل (\lr{web tier}\footnote{لایه وب}) و سرورهای پایگاه داده (\lr{data tier}\footnote{لایه داده}) امکان مقیاس‌پذیری مستقل آن‌ها را فراهم می‌کند.  

\subsection{کدام پایگاه داده را انتخاب کنیم؟}  
می‌توانید بین یک پایگاه داده رابطه‌ای سنتی و یک پایگاه داده غیررابطه‌ای یکی را انتخاب کنید. اجازه دهید تفاوت‌های آن‌ها را بررسی کنیم.  

\subsubsection{پایگاه‌های داده رابطه‌ای}  
پایگاه‌های داده رابطه‌ای که با نام \lr{RDBMS}\footnote{سیستم مدیریت پایگاه داده رابطه‌ای} یا پایگاه داده \lr{SQL}\footnote{زبان پرس‌وجوی ساختاریافته} نیز شناخته می‌شوند، داده‌ها را در قالب جدول و سطر نمایش داده و ذخیره می‌کنند. از محبوب‌ترین آن‌ها می‌توان به \lr{MySQL}، \lr{Oracle Database} و \lr{PostgreSQL} اشاره کرد. شما می‌توانید با استفاده از \lr{SQL} عملیات \lr{join}\footnote{اتصال جداول} را بین جداول مختلف پایگاه داده انجام دهید.  

\subsubsection{پایگاه‌های داده غیررابطه‌ای}  
پایگاه‌های داده غیررابطه‌ای که با نام \lr{NoSQL}\footnote{پایگاه‌داده‌هایی که از \lr{SQL} استفاده نمی‌کنند} نیز شناخته می‌شوند، به چهار دسته تقسیم می‌شوند:  
\begin{itemize}
    \item ذخیره‌سازی کلید-مقدار (\lr{key-value stores})  
    \item ذخیره‌سازی گراف (\lr{graph stores})  
    \item ذخیره‌سازی ستونی (\lr{column stores})  
    \item ذخیره‌سازی اسناد (\lr{document stores})  
\end{itemize}  
از جمله پایگاه‌های داده محبوب در این دسته می‌توان به \lr{CouchDB}، \lr{Neo4j}، \lr{Cassandra}، \lr{HBase} و \lr{Amazon DynamoDB} اشاره کرد. به‌طور کلی، عملیات \lr{join} در پایگاه‌های داده غیررابطه‌ای پشتیبانی نمی‌شود.  

\subsection{انتخاب مناسب‌ترین گزینه}  
برای بیشتر توسعه‌دهندگان، پایگاه‌های داده رابطه‌ای بهترین گزینه هستند، زیرا بیش از ۴۰ سال است که وجود دارند و به‌خوبی عمل کرده‌اند. با این حال، اگر پایگاه‌های داده رابطه‌ای برای موارد استفاده خاص شما مناسب نیستند، بررسی گزینه‌های غیررابطه‌ای ضروری است.  

پایگاه‌های داده غیررابطه‌ای ممکن است در شرایط زیر انتخاب بهتری باشند:  
\begin{itemize}
    \item برنامه شما به تأخیر بسیار کم (\lr{super-low latency}) نیاز دارد.  
    \item داده‌های شما بدون ساختار هستند یا هیچ رابطه‌ای بین آن‌ها وجود ندارد.  
    \item فقط نیاز به سریال‌سازی و دیسریال‌سازی داده‌ها (مانند \lr{JSON}، \lr{XML}، \lr{YAML} و غیره) دارید.  
    \item نیاز به ذخیره حجم بسیار زیادی از داده‌ها دارید.  
\end{itemize}