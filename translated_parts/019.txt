\section{عملکرد حتی در صورت آفلاین بودن پایگاه داده}
با استفاده از این معماری، حتی اگر یک پایگاه داده آفلاین باشد، می‌توانید به داده‌های ذخیره شده در سرور دیگر دسترسی داشته باشید. در بخش قبل، بررسی کردیم که چگونه یک \lr{load balancer} به بهبود در دسترس‌پذیری سیستم کمک می‌کند. حال همین پرسش را اینجا مطرح می‌کنیم: اگر یکی از پایگاه‌های داده آفلاین شود چه اتفاقی می‌افتد؟ طراحی معماری مورد بحث در شکل ۱-۵ می‌تواند این حالت را مدیریت کند:

\begin{itemize}
\item اگر تنها یک پایگاه داده \lr{slave} موجود باشد و آفلاین شود، عملیات خواندن موقتاً به پایگاه داده \lr{master} هدایت می‌شود. به محض شناسایی مشکل، یک پایگاه داده \lr{slave} جدید جایگزین نمونه قدیمی می‌شود. در صورتی که چندین پایگاه داده \lr{slave} موجود باشد، عملیات خواندن به سایر پایگاه‌های داده \lr{slave} سالم هدایت می‌شود و یک سرور پایگاه داده جدید جایگزین نمونه قدیمی خواهد شد.

\item اگر پایگاه داده \lr{master} آفلاین شود، یکی از پایگاه‌های داده \lr{slave} به عنوان \lr{master} جدید ارتقا می‌یابد. تمام عملیات پایگاه داده موقتاً روی \lr{master} جدید اجرا می‌شوند. همزمان، یک پایگاه داده \lr{slave} جدید برای تکثیر داده‌ها جایگزین نمونه قدیمی می‌شود.
\end{itemize}

در سیستم‌های عملیاتی، ارتقای یک \lr{master} جدید پیچیده‌تر است، زیرا داده‌های موجود در پایگاه داده \lr{slave} ممکن است به‌روز نباشند. داده‌های از دست رفته باید با اجرای اسکریپت‌های بازیابی داده به‌روزرسانی شوند. اگرچه برخی روش‌های دیگر تکثیر مانند تکثیر چند مسترِی\footnote{\lr{multi-masters}} و تکثیر حلقوی\footnote{\lr{circular replication}} می‌توانند کمک‌کننده باشند، اما این راه‌اندازی‌ها پیچیده‌تر هستند و بحث درباره آن‌ها خارج از محدوده این کتاب است. خوانندگان علاقه‌مند می‌توانند به منابع مرجع ذکر شده مراجعه کنند.

شکل ۱-۶ طراحی سیستم پس از افزودن \lr{load balancer} و تکثیر پایگاه داده را نشان می‌دهد.