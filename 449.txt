Step 4 - Wrap up In this chapter, we presented the architecture design for video streaming services like YouTube. If there is extra time at the end of the interview, here are a few additional points: • Scale the API tier: Because API servers are stateless, it is easy to scale API tier horizontally. • Scale the database: You can talk about database replication and sharding. • Live streaming: It refers to the process of how a video is recorded and broadcasted in real time. Although our system is not designed specifically for live streaming, live streaming and non-live streaming have some similarities: both require uploading, encoding, and streaming. The notable differences are: • Live streaming has a higher latency requirement, so it might need a different streaming protocol. • Live streaming has a lower requirement for parallelism because small chunks of data are already processed in real-time. • Live streaming requires different sets of error handling. Any error handling that takes too much time is not acceptable. • Video takedowns: Videos that violate copyrights, pornography, or other illegal acts shall be removed. Some can be discovered by the system during the upload process, while others might be discovered through user flagging. Congratulations on getting this far! Now give yourself a pat on the back. Good job!