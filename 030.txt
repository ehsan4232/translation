4. The CDN caches the image and returns it to User A. The image remains cached in the CDN until the TTL expires. 5. User B sends a request to get the same image. 6. The image is returned from the cache as long as the TTL has not expired. Considerations of using a CDN • Cost: CDNs are run by third-party providers, and you are charged for data transfers in and out of the CDN. Caching infrequently used assets provides no significant benefits so you should consider moving them out of the CDN. • Setting an appropriate cache expiry: For time-sensitive content, setting a cache expiry time is important. The cache expiry time should neither be too long nor too short. If it is too long, the content might no longer be fresh. If it is too short, it can cause repeat reloading of content from origin servers to the CDN. • CDN fallback: You should consider how your website/application copes with CDN failure. If there is a temporary CDN outage, clients should be able to detect the problem and request resources from the origin. • Invalidating files: You can remove a file from the CDN before it expires by performing one of the following operations: • Invalidate the CDN object using APIs provided by CDN vendors. • Use object versioning to serve a different version of the object. To version an object, you can add a parameter to the URL, such as a version number. For example, version number 2 is added to the query string: image.png?v=2. Figure 1-11 shows the design after the CDN and cache are added.