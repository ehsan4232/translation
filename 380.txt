Let us revisit the time complexity of the algorithm after applying those two optimizations: 1. Find the prefix node. Time complexity: O(1) 2. Return top k. Since top k queries are cached, the time complexity for this step is O(1). As the time complexity for each of the steps is reduced to O(1), our algorithm takes only O(1) to fetch top k queries. Data gathering service In our previous design, whenever a user types a search query, data is updated in real-time. This approach is not practical for the following two reasons: • Users may enter billions of queries per day. Updating the trie on every query significantly slows down the query service. • Top suggestions may not change much once the trie is built. Thus, it is unnecessary to update the trie frequently. To design a scalable data gathering service, we examine where data comes from and how data is used. Real-time applications like Twitter require up to date autocomplete suggestions. However, autocomplete suggestions for many Google keywords might not change much on a daily basis. Despite the differences in use cases, the underlying foundation for data gathering service remains the same because data used to build the trie is usually from analytics or logging services. Figure 13-9 shows the redesigned data gathering service. Each component is examined one by one.